{
	"info": {
		"_postman_id": "d0f508a1-3e2d-4181-b41b-a9626c6d9009",
		"name": "Food_AT_WorkPlace_Collections",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Admin_Collection",
			"item": [
				{
					"name": "Create Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response has a valid Content-Type header', function() {\r",
									"  pm.expect(pm.response.headers.get('content-type')).to.include('application/json');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"kapa65ul2141@gmail.com\",\r\n    \"password\": \"ajnkj12871293\",\r\n    \"isAdmin\": true,\r\n    \"admin\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/createAdmin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"createAdmin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response has a valid Content-Type header', function() {\r",
									"  pm.expect(pm.response.headers.get('content-type')).to.include('application/json');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"kapa65ul2141@gmail.com\",\r\n    \"password\": \"ajnkj12871293\",\r\n    \"isAdmin\": true,\r\n    \"admin\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/adminLogin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"adminLogin"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Employee_Controller",
			"item": [
				{
					"name": "Get Employee Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response has a valid Content-Type header', function() {\r",
									"  pm.expect(pm.response.headers.get('content-type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"\r",
									"    pm.expect(pm.response.text()).to.include(\"Orders placed by Customer\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/employee/orders/{{defaultUserEmail}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"employee",
								"orders",
								"{{defaultUserEmail}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Item_Controller",
			"item": [
				{
					"name": "get items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response has a valid Content-Type header', function() {\r",
									"  pm.expect(pm.response.headers.get('content-type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"\r",
									"    pm.expect(pm.response.text()).to.include(\"List of Items\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "get free items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response has a valid Content-Type header', function() {\r",
									"  pm.expect(pm.response.headers.get('content-type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"\r",
									"    pm.expect(pm.response.text()).to.include(\"List of Free Items\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/freeitems",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"freeitems"
							]
						}
					},
					"response": []
				},
				{
					"name": "get paid items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response has a valid Content-Type header', function() {\r",
									"  pm.expect(pm.response.headers.get('content-type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"\r",
									"    pm.expect(pm.response.text()).to.include(\"List of Paid Items\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/paiditems",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"paiditems"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put Item Available status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response has a valid Content-Type header', function() {\r",
									"  pm.expect(pm.response.headers.get('content-type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"\r",
									"    pm.expect(pm.response.text()).to.include(\"Item Availability Updated\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/availableStatus/{{itemid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"availableStatus",
								"{{itemid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "put item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response has a valid Content-Type header', function() {\r",
									"  pm.expect(pm.response.headers.get('content-type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"\r",
									"    pm.expect(pm.response.text()).to.include(\"Item Successfully Updated\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "        {\r\n            \"itemsId\": 16,\r\n            \"category\": \"Drinks\",\r\n            \"image\": \"no imageEOWNI\",\r\n            \"name\": \"kit kat shake\",\r\n            \"details\": \"kit kat shake\",\r\n            \"duration\": 20,\r\n            \"price\": 185,\r\n            \"veg\": true,\r\n            \"available\": false\r\n        }"
						},
						"url": {
							"raw": "{{baseUrl}}/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('Response has a valid Content-Type header', function() {\r",
									"  pm.expect(pm.response.headers.get('content-type')).to.include('application/json');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n            \"itemsId\": 125,\r\n            \"category\": \"Food\",\r\n            \"image\": \"https://www.bing.com/images/search?q=food&id=869E61693B4B53484DB980820E9C894B7EFF58E1&FORM=IARRTH\",\r\n            \"name\": \"Trail_add_item\",\r\n            \"details\": \"Trail_add_item\",\r\n            \"duration\": 1,\r\n            \"price\": 10,\r\n            \"veg\": true,\r\n            \"available\": true\r\n        }"
						},
						"url": {
							"raw": "{{baseUrl}}/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "JWT_Controller",
			"item": [
				{
					"name": "JWT Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response has a valid Content-Type header', function() {\r",
									"  pm.expect(pm.response.headers.get('content-type')).to.include('application/json');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"omcv@deloitte.com\",\r\n  \"password\": \"admin\",\r\n  \"isAdmin\": false,\r\n  \"admin\": false\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Order_Controller",
			"item": [
				{
					"name": "Update order status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response has a valid Content-Type header', function() {\r",
									"  pm.expect(pm.response.headers.get('content-type')).to.include('application/json');\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Order Status Updated!!\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/updateOrderByStatus/{{orderid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"updateOrderByStatus",
								"{{orderid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get order status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response has a valid Content-Type header', function() {\r",
									"  pm.expect(pm.response.headers.get('content-type')).to.include('application/json');\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Status of OrderID\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/orderStatus/{{orderid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orderStatus",
								"{{orderid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get posted orders",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Place order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('Response has a valid Content-Type header', function() {\r",
									"  pm.expect(pm.response.headers.get('content-type')).to.include('application/json');\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Order Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"naratreddy@deloitte.com\",\r\n  \"amount\": 0,\r\n  \"tableNo\": 0,\r\n  \"data\": {\r\n    \"1\": 1,\r\n    \"2\": 2\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "get orders by order id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response has a valid Content-Type header', function() {\r",
									"  pm.expect(pm.response.headers.get('content-type')).to.include('application/json');\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"OrderID exist\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/{{orderid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"{{orderid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete orders by orderid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 406\", function () {\r",
									"    pm.response.to.have.status(406);\r",
									"});\r",
									"\r",
									"pm.test('Response has a valid Content-Type header', function() {\r",
									"  pm.expect(pm.response.headers.get('content-type')).to.include('application/json');\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Order cannot be cancelled now. Its too late.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/{{orderid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"{{orderid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get order details using status id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response has a valid Content-Type header', function() {\r",
									"  pm.expect(pm.response.headers.get('content-type')).to.include('application/json');\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"List of Orders\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orderByStatus/{{order_status}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orderByStatus",
								"{{order_status}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User_Validation",
			"item": [
				{
					"name": "Verify Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response has a valid Content-Type header', function() {\r",
									"  pm.expect(pm.response.headers.get('content-type')).to.include('application/json');\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"\r",
									"    pm.expect(pm.response.text()).to.include(\"token\");\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"kasandra@gmail.com\",\r\n    \"password\": \"Kasandra776\",\r\n    \"isAdmin\": true,\r\n    \"admin\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/verifypassword",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"verifypassword"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response has a valid Content-Type header', function() {\r",
									"  pm.expect(pm.response.headers.get('content-type')).to.include('application/json');\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"\r",
									"    pm.expect(pm.response.text()).to.include(\"OTP sent Successfully\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"surroundedalive@itsjiff.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/sendotp",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sendotp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response has a valid Content-Type header', function() {\r",
									"  pm.expect(pm.response.headers.get('content-type')).to.include('application/json');\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"\r",
									"    pm.expect(pm.response.text()).to.include(\"token\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"kapa65ul@gmail.com\",\r\n    \"password\": \"ajnkj128793\",\r\n    \"isAdmin\": false,\r\n    \"admin\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/createUser",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"createUser"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response has a valid Content-Type header', function() {\r",
									"  pm.expect(pm.response.headers.get('content-type')).to.include('application/json');\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"\r",
									"    pm.expect(pm.response.text()).to.include(\"data\");\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"kasandra@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/check-email",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"check-email"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{authToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}